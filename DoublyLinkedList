class Node:
    def __init__(self, data, next = None, prev = None):
        self.data = data
        self.prev = prev
        self.next = next

class DoublyLinkedlist:
    def __init__(self):
        self.head = None

    def insert_at_begining(self, data):
        if self.head is None:
            node = Node(data, self.head, None)
            self.head = node
        else:
            node = Node(data, self.head, None)
            self.head.prev = node
            self.head = node

    def insert_at_end(self, data):
        if self.head is None:
            self.head = Node(data, None, None)
            return

        itr = self.head
        while itr.next:
            itr = itr.next
        itr.next = Node(data, None, itr)

    def insert_at_index(self, data, index):
        if index < 0 and index > self.get_length():
            raise Exception("InvalidIndex")

        if index == 0:
            self.insert_at_begining(data)
            return

        itr = self.head
        count = 0
        while itr:
            if count == index - 1:
                node = Node(data, itr.next, itr)
                if node.next:
                    node.next.prev = node
                itr.next = node
                break
            itr = itr.next
            count += 1

    def remove_at_index(self, index):
        if index < 0 and index > self.get_length():
            raise Exception("InvalidIndex")

        if index == 0:
            self.head = self.head.next
            self.head.prev = None
            return

        itr = self.head
        count = 0
        while itr:
            if count == index:
                itr.prev.next = itr.next
                if itr.next:
                    itr.next.prev = itr.prev
                break
            itr = itr.next
            count += 1

    def print_foreward(self):
        if self.head is None:
            print("Linked List is empty")
            return

        itr = self.head
        llstr = ''
        while itr:
            if itr.next is None:
                llstr += str(itr.data)
                break
            llstr += str(itr.data) + ' <--> '
            itr = itr.next

        print(llstr)

    def print_backward(self):
        if self.head is None:
            print("Linked List is empty")
            return

        last_node = self.get_last_node()
        itr = last_node
        llstr = ''
        while itr:
            if itr.prev is None:
                llstr += str(itr.data)
                break
            llstr += str(itr.data) + ' <--> '
            itr = itr.prev

        print(llstr)

    def get_last_node(self):
        itr = self.head
        while itr.next:
            itr = itr.next
        return itr

    def get_length(self):
        itr = self.head
        count = 0
        while itr:
            itr = itr.next
            count += 1
        return count


dll = DoublyLinkedlist()
dll.insert_at_begining(1)
dll.insert_at_begining(2)
dll.insert_at_begining(3)
dll.print_foreward()
dll.print_backward()
print(dll.get_length())
dll.insert_at_end(4)
dll.print_foreward()
dll.insert_at_index(5, 4)
dll.print_foreward()
dll.remove_at_index(4)
dll.print_foreward()
