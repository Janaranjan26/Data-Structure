class Node:
    def __init__(self, data, next = None, prev = None):
        self.data = data
        self.prev = prev
        self.next = next

class DoublyLinkedlist:
    def __init__(self):
        self.head = None

    def insert_at_begining(self, data):
        if self.head is None:
            node = Node(data, self.head, None)
            self.head = node
        else:
            node = Node(data, self.head, None)
            self.head.prev = node
            self.head = node

    def print_foreward(self):
        if self.head is None:
            print("Linked List is empty")
            return

        itr = self.head
        llstr = ''
        while itr:
            if itr.next is None:
                llstr += str(itr.data)
                break
            llstr += str(itr.data) + ' <--> '
            itr = itr.next

        print(llstr)

    def print_backward(self):
        if self.head is None:
            print("Linked List is empty")
            return

        last_node = self.get_last_node()
        itr = last_node
        llstr = ''
        while itr:
            if itr.prev is None:
                llstr += str(itr.data)
                break
            llstr += str(itr.data) + ' <--> '
            itr = itr.prev

        print(llstr)

    def get_last_node(self):
        itr = self.head
        while itr.next:
            itr = itr.next
        return itr


dll = DoublyLinkedlist()
dll.insert_at_begining(1)
dll.insert_at_begining(2)
dll.insert_at_begining(3)
dll.print_foreward()
dll.print_backward()
